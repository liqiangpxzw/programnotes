package web1;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;

public class TestSign {
 public static void main(String[] args) throws IOException { 
  Map map = new HashMap();
  map.put("orderNo", "0012356345677");
  map.put("channel", "02");
  map.put("type", "1");
  map.put("amount", "1000");
  map.put("merchant", "020");
  buildSign(map, "xkykJ&4slk#jsl");
  
 }
 
 public static String buildSign(Map params, String secret) {
  Map treeMap = new TreeMap(params);// treeMap默认会以key值升序排序
  StringBuilder sb = new StringBuilder();
  for (String key : treeMap.keySet()) {// 排序后的字典，将所有参数按"key=value"格式拼接在一起
   sb.append(key).append("=").append(treeMap.get(key));
  }
  sb.append(secret);
  System.out.println("待加密的源参数串为:" + sb.toString());
  MessageDigest md5;
  byte[] bytes = null;
  try {
   md5 = MessageDigest.getInstance("MD5");
   bytes = md5.digest(sb.toString().getBytes("UTF-8"));// md5加密
  } catch (NoSuchAlgorithmException e) {
   e.printStackTrace();
  } catch (UnsupportedEncodingException e) {
   e.printStackTrace();
  }
  // 将MD5输出的二进制结果转换为小写的十六进制
  StringBuilder sign = new StringBuilder();
  for (int i = 0; i < bytes.length; i++) {
   String hex = Integer.toHexString(bytes[i] & 0xFF);
   if (hex.length() == 1) {
    sign.append("0");
   }
   sign.append(hex);
  }
  System.out.println("加密后签名为:" + sign.toString());
  return sign.toString();
 }
}